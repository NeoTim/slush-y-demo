;(function(){
'use strict';
angular
  .module('beast', [
  'ngCookies',
  'ngResource',
  'ngSanitize',
  'restangular',
  'btford.socket-io',
  'ui.router',
  'ui.bootstrap',
  'core',
  'app.modules'
  ])
  .run( run );

  /* @inject */
  function run($rootScope, $location, Auth) {
    // Redirect to login if route requires auth and you're not logged in
    $rootScope.$on('$stateChangeStart', function (event, next) {
      Auth.isLoggedInAsync(function(loggedIn) {
        if (next.authenticate && !loggedIn) {
          $location.path('/signin');
        }
      });
    });
  }

}).call(this);

;(function(){
  'use strict';

  angular
    .module('core', [])
    .constant('serverBaseUrl', 'http://localhost:9000')
    .constant('serverUrl', 'http://localhost:9000/api');

}).call(this);
;(function(){
'use strict';
  angular
    .module('app.modules', [
      'authentication',
      'administration',
      'generators',
      'articles'
    ]);

}).call(this);
;(function(){
  'use strict';

  angular
    .module('administration', []);

}).call(this);
/*

  TODO: Fix the y-route

 */
;(function(){
'use strict';

 angular
  .module('articles', []);

}).call(this);
;(function(){
  'use strict';

  angular
    .module( 'authentication', []);

}).call(this);
;(function(){
'use strict';

 angular
  .module('generators', []);

}).call(this);
;(function(){
'use strict';

  angular
    .module('core')
    .config( main );

  /* @inject */
  function main($stateProvider, $urlRouterProvider, $locationProvider) {

    $urlRouterProvider.otherwise('/');
    $locationProvider.html5Mode(true);

    $stateProvider
      .state('home', {
        url: '/',
        templateUrl: 'app/core/views/home.view.html',
        controller: 'HomeCtrl as vm',
        resolve: {
          Resolved: Resolved
        }
      });

      /*
          Resolved Functions
       */
      //////////////

      /* @inject */
      function Resolved( Thing ){
        return Thing.all()
          .then( function ( response ){
            return response.data;
          });
      }
  }
}).call(this);

;(function(){
  'use struct';
  angular
    .module('core')
    .controller('FooterCtrl', FooterCtrl);
    /* @inject */
    function FooterCtrl($scope, $location, $state, StatesService) {


    }

}).call(this);
;(function(){
  'use struct';
  angular
    .module('core')
    .controller('HeaderCtrl', HeaderCtrl);
    /* @inject */
    function HeaderCtrl($scope, $location, $state, StatesService) {


    }

}).call(this);
;(function(){
'use strict';

  angular
    .module('core')
    .controller('HomeCtrl', HomeCtrl);

  /* @inject */
  function HomeCtrl(Resolved, $scope, Thing, socket, logger) {

    var vm = this;
    vm.shown = {};
    vm.awesomeThings = Resolved;
    vm.addThing = addThing;
    // vm.deleteThing = deleteThing;
    vm.showThing = showThing;
    vm.createNewThing = createNewThing;
    vm.updateThing = updateThing;

    vm.Thing = Thing;

    socket.syncUpdates('things', vm.awesomeThings);

    ////////////////////

    function addThing() {
      if(vm.newThing === '') {
        return;
      }
      Thing.create( {name: vm.newThing} );
      vm.newThing = '';
      vm.showDetail = false;
      vm.creating = false;
      vm.shown = {};
    }

    // function deleteThing(thing) {
    //   // console.log(thing)
    //   Thing.destroy(thing._id);
    //   vm.showDetail = false;
    //   vm.editing = false;
    // }

    function updateThing(thing){
      Thing
        .update(thing._id, thing)
        .then( function (data) {
          vm.editing = false
        });
    }

    function showThing(thing){

        if(thing._id === vm.shown._id){
          vm.showDetail = false;
          vm.shown = {};
        } else {
          vm.showDetail = true;
          vm.shown = thing;
        }
    }

    function createNewThing(){
      vm.showDetail = true;
      vm.shown = {};
      vm.creating = true;
    }

    $scope.$on('$destroy', function () {
      socket.unsyncUpdates('things');
    });
  }
}).call(this);

;(function(){
'use strict';

angular
  .module('core')
  .controller('NavbarCtrl', NavbarCtrl);

  /* @inject */
  function NavbarCtrl($scope, $location, Auth, Menus, $state) {
    var vm = this;
    vm.menu = [
      {
        'title': 'Home',
        'link': 'home',
        'color': 'pink-400'
      },{
        'title': 'Generators',
        'link': 'generators',
        'color': 'blue-500'
      },{
        'title': 'Articles',
        'link': 'articles',
        'color': 'blue-300'
      }
    ];

    vm.toggle = function(){
      $('#dr3').dropdown('toggle')
    }

    // $scope.menu = Menus.getMenu('topbar');


    vm.isCollapsed = true;
    vm.isLoggedIn = Auth.isLoggedIn;
    vm.isAdmin = Auth.isAdmin;
    vm.getCurrentUser = Auth.getCurrentUser;
    vm.logout = logout;
    vm.isActive = isActive;

    function logout() {
      Auth.logout();
      $location.path('/signout');
    }

    function isActive(state) {
      return $state.includes(state);
    }
  }
}).call(this);
;(function(){
  'use struct';
  angular
    .module('core')
    .controller('SideBarCtrl', SideBarCtrl);
    /* @inject */
    function SideBarCtrl($scope, $location, $state, Auth, Menus) {

      $scope.isLoggedIn = Auth.isLoggedIn;

      $scope.menu = Menus.getMenu('topbar');

      $scope.isCollapsed = true;
      $scope.references = [
        {title: 'Angularjs Style Guide', link: 'https://github.com/johnpapa/angularjs-styleguide'}
      ];
      $scope.isActive = function(route) {
        return route === $state.current.name;
      };
    }

}).call(this);
;(function(){
  'use strict';
  //Setting up route
  angular
    .module('administration')
    .config( Configuration );

  /* @inject */
  function Configuration($stateProvider) {
    // administration state routing
    $stateProvider
      .state('admin', {
        url: '/admin',
        templateUrl: 'app/modules/administration/views/admin.view.html',
        abstract:true,
      })
      .state('admin.profile', {
        url: '/profile',
        templateUrl: 'app/modules/administration/views/profile/profile.view.html',
        controller: 'ProfileController as vm',
        authenticate:true,
        resolve: {
          Resolved: Resolved
        }
      })
      .state('admin.profile-edit', {
        url: '/profile-edit',
        templateUrl: 'app/modules/administration/views/profile/edit-profile.view.html',
        controller: 'ProfileController as vm',
        authenticate:true,
        resolve: {
          Resolved: Resolved
        }
      })
      .state('admin.settings', {
        url: '/settings',
        templateUrl: 'app/modules/administration/views/settings/change-password.view.html',
        controller: 'SettingsController as vm',
        authenticate:true,
        resolve: {
          Resolved: Resolved
        }
      })
      .state('admin.accounts-list', {
        url: '/accounts',
        templateUrl: 'app/modules/administration/views/accounts/accounts.list.view.html',
        controller: 'AccountsController as vm',
        authenticate:true,
        resolve: {
          resolvedAccounts: resolvedUsers
        }
      })
      .state('admin.account-detail', {
        url: '/accounts/:id',
        templateUrl: 'app/modules/administration/views/accounts/account.detail.view.html',
        controller: 'AccountDetailController as vm',
        authenticate:true,
        resolve: {
          ResolvedAccount: ResolvedAccount
        }
      })
      .state('admin.account-edit', {
        url: '/accounts/:id/edit',
        templateUrl: 'app/modules/administration/views/accounts/account.edit.view.html',
        controller: 'AccountDetailController as vm',
        authenticate:true,
        resolve: {
          ResolvedAccount: ResolvedAccount
        }
      })


    ////////////////////


    /* @inject */
    function resolvedUsers(User){
      return User.all()
        .then( function ( response ){
          return response.data;
        });
    }

    /* @inject */
    function Resolved(User, $storage){
      return User.getMe()
        .then(function ( response ){
          return response.data;
        });
    }

    /* @inject */
    function ResolvedAccount(User, $stateParams){
      return User.one($stateParams.id)
        .then(function ( response ){
          return response.data;
        });
    }

  }

}).call(this);
;(function(){
  'use strict';
  angular
    .module('administration')
    .controller('AccountDetailController', AccountDetailController);

  /* @inject */
  function AccountDetailController(ResolvedAccount, $scope, User, Auth, $state, logger) {
    var vm = this;

    vm.account = ResolvedAccount;
    vm.updateUser = updateUser;
    console.log(vm.account)

    //////////////////////

    function updateUser(){
      User.update(vm.account._id, vm.account)
        .then( function ( data ){

          $state.go('admin.account-detail', {id: vm.account._id});

        });

    }
  }

}).call(this);
;(function(){
  'use strict';
  angular
    .module('administration')
    .controller('AccountsController', AccountsController);

  /* @inject */
  function AccountsController(resolvedAccounts, $scope, User, Auth, $state, logger) {
    var vm = this;

    vm.accounts = resolvedAccounts;
    console.log(vm.accounts)
    //////////////////////
  }

}).call(this);
;(function(){
  'use strict';
  angular
    .module('administration')
    .controller('AdminController', AdminController);

  /* @inject */
  function AdminController($scope, Auth, User, resolvedUsers, $location) {
    var vm = this;
    vm.details = false;
    vm.currentUser = null;
    vm.users = resolvedUsers;
    vm.destroy = destroy;
    vm.showUser = showUser;
    vm.hideUser = hideUser;

    //////////////

    function showUser(user){
      if(vm.currentUser && vm.currentUser._id === user._id) {
        return hideUser();
      }
      vm.currentUser = user;
      vm.details = true;
    }
    function hideUser(){
      vm.currentUser = null;
      vm.details = false;
    }

    function destroy(user) {
      var id = user._id;
      User.destroy(id)
        .then(function(){
          removeUserFromScope(id)
        });
    }

    function removeUserFromScope(id){
      angular.forEach(vm.users, function (item, i) {
        if (item._id === id) {
          vm.users.splice(i, 1);
        }
      });
    }
  }

}).call(this);
;(function(){
  'use strict';
  angular
    .module('administration')
    .controller('ProfileController', ProfileController);

  /* @inject */
  function ProfileController(Resolved, $scope, User, Auth, $state, logger) {
    var vm = this;
    vm.errors = {};
    vm.updateUser = updateUser;
    vm.changePassword = changePassword;

    vm.account = Resolved;

    console.log('User', vm.account);

    //////////////////////

    function updateUser(){
      User.update(vm.account._id, vm.account)
        .then( function ( data ){
          logger.logSuccess('User Updated');
          $state.go('admin.profile');
        })
        .catch( function (error){
          logger.logError('User not updated');
        })
    }

    function changePassword(form) {
      vm.submitted = true;
      if(form.$valid) {
        Auth.changePassword( vm.account.oldPassword, vm.account.newPassword )
        .then( function() {
          vm.message = 'Password successfully changed.';
          $state.go('admin.profile');
        })
        .catch( function() {
          form.password.$setValidity('mongoose', false);
          vm.errors.other = 'Incorrect password';
          vm.message = '';
        });
      }
    }
  }

}).call(this);
;(function(){
  'use strict';

  angular
    .module('administration')
    .controller('SettingsController', SettingsController);

  /* @inject */
  function SettingsController(Resolved, $scope, $state, Auth) {
    var vm = this;
    vm.errors = {};
    vm.changePassword = changePassword;
    vm.user = Resolved;

    ///////////////////////

    function changePassword(form) {
      vm.submitted = true;
      if(form.$valid) {
        Auth.changePassword( vm.user.oldPassword, vm.user.newPassword )
        .then( function() {
          vm.message = 'Password successfully changed.';
          $state.go('admin.profile');
        })
        .catch( function() {
          form.password.$setValidity('mongoose', false);
          vm.errors.other = 'Incorrect password';
          vm.message = '';
        });
      }
    }

  }
}).call(this);
;(function(){
'use strict';

  angular
    .module('core')
    .factory('Articles', Articles);

    /* @inject */
    function Articles($http, serverUrl, $q, logger) {
      // Define Private Variables
      var api = createUrl(serverUrl, 'articles');
      // Define the public api
      var instance = {
        all: all,
        one: one,
        create: create,
        update: update,
        destroy: destroy
      };
      return instance;

      ////////////////

      function all (){
        return $http.get( api );
      }
      function one ( id ){
        return $http.get( createUrl( api, id) );
      }
      function create ( data ){
        return $http.post( api, data )
          .then( function (response){
            logger.logSuccess('Articles Saved');
            return response.data;
          })
          .catch( function (err){
            logger.logError('Error Saving');
            return err;
          });
      }
      function update ( id, data ){
        return $http.put( createUrl( api, id ), data )
          .then( function (response){
            logger.logSuccess('Article Updated Successfully');
            return response.data;
          })
          .catch( function (err){
            logger.logError('Error Saving');
            return err
          });
      }
      function destroy ( id ){
        return $http.delete( createUrl( api, id ) )
          .then( function (response){
            logger.logSuccess('Successfully Deleted');
            return response.data;
          })
          .catch( function (err){
            logger.logError('Error Deleting');
            return err;
          });
      }
      function createUrl(){
        var args = Array.prototype.slice.call(arguments);
        return args.join('/');
      }
    }

}).call(this);

;(function(){
'use strict';


  // Configuring the Articles module
  angular
    .module('articles')
    .run( Run );

  /* @inject */
  function Run(Menus) {
    // Set top bar menu items
    Menus.addMenuItem('topbar', 'Articles', 'articles');
    Menus.addMenuItem('topbar', 'New Article', 'articles/create');
  }

}).call(this);
;(function(){
'use strict';

  //Setting up route
  angular
    .module('articles')
    .config( Configuration );

  /* @inject */
  function Configuration($stateProvider) {
    // Articles state routing
    $stateProvider
      .state('articles', {
        url: '/articles',
        templateUrl: 'app/modules/articles/views/articles.view.html',
        controller: 'ArticlesController as vm',
        resolve: {
          resolvedList: resolvedList
        }
      })
      .state('articles-create', {
        url: '/articles/create',
        templateUrl: 'app/modules/articles/views/articles.create.view.html',
        controller: 'ArticlesCreateController as vm'
      })
      .state('article-detail', {
        url: '/articles/:articleId',
        templateUrl: 'app/modules/articles/views/article.detail.view.html',
        controller: 'ArticlesDetailController as vm',
        resolve: {
          resolvedDetail: resolvedDetail
        }
      })
      .state('article-edit', {
        url: '/articles/:articleId/edit',
        templateUrl: 'app/modules/articles/views/article.edit.view.html',
        controller: 'ArticlesDetailController as vm',
        resolve: {
          resolvedDetail: resolvedDetail
        }
      });

    ////////////////
    function resolvedDetail($stateParams, Articles){
      return Articles.one($stateParams.articleId)
        .then( function ( response ){
          return response.data;
        })
    }
    function resolvedList(Articles){
      return Articles.all()
        .then( function ( response ){
          return response.data;
        })
    }
  }
}).call(this);
;(function(){
'use strict';

  // Articles controller
  angular
    .module('articles')
    .controller('ArticlesCreateController', ArticlesCreateController);

  /* @inject */
  function ArticlesCreateController($scope, $state, Articles, logger) {
    var vm = this;
    vm.create = create;

    $scope.$emit('child:opened');

    //////////////////////

    // Create new Article
    function create() {
      Articles.create(vm.newArticle)
        .then( function (response){
          // Redirect after save
          $state.go('article-detail', {articleId: response.data._id});
        })
        .catch( function (error){
          vm.error = error.data.message;
        })
    }

  }
}).call(this);
;(function(){
'use strict';

  // Articles controller
  angular
    .module('articles')
    .controller('ArticlesDetailController', ArticlesDetailController);

  /* @inject */
  function ArticlesDetailController(resolvedDetail, $scope, $stateParams, $state, Articles, logger) {
    var vm = this;
    vm.remove = remove;
    vm.update = update;
    vm.article = resolvedDetail;

    //////////////////////



    // Remove existing Article
    function remove(article) {
      var article = article || vm.article;
      Articles.destroy(article._id)
        .then( function(){
          $state.go('articles');
        });
    }

    // Update existing Article
    function update() {
      var article = vm.article;
      Articles.update(article._id, article)
        .then( function ( data ){
          $state.go('article-detail', {articleId: article._id});
        })
        .catch( function (error){
          vm.error = error.data.message;
        });
    }
  }
}).call(this);
;(function(){
'use strict';

  // Articles controller
  angular
    .module('articles')
    .controller('ArticlesController', ArticlesController);

  /* @inject */
  function ArticlesController(resolvedList, $scope, $stateParams, $state, Articles, logger, socket) {

    var vm = this;
    vm.articles = resolvedList;
    vm.showArticle = showArticle;
    vm.isActive = isActive;
    vm.shown = {};

    socket.syncUpdates('articles', vm.articles);
    //////////////////////


    function isActive(state) {
      // console.log(state === $state.params.articleId)
      return $state.includes('articles', {articleId: state});
    }

    function showArticle(article){
        if(article._id === vm.shown._id){
          $state.go('articles');
          vm.showDetail = false;
          vm.shown = {};
        } else {
          $state.go('articles.detail', {articleId: article._id});
          vm.shown = article;
          // vm.showDetail = true;
        }
    }

    /*
        Event emitted from child states.
     */
    $scope.$on('child:closed', function ( event ){
      vm.shown = {};
      vm.showDetail = false;
    });
    $scope.$on('child:opened', function ( event ){
      vm.shown = {};
      vm.showDetail = true;
    });
    $scope.$on('$destroy', function () {
      socket.unsyncUpdates('articles');
    });
  }
}).call(this);
;(function(){
'use strict';
  angular
    .module('authentication')
    .config( authenticationConfig );

  /* @inject */
  function authenticationConfig($locationProvider, $httpProvider) {

    $httpProvider.interceptors.push('authInterceptor');

  }
}).call(this);
;(function(){
  'use strict';

  angular
    .module('authentication')
    .config( AuthRoutes );

  /* @inject */
  function AuthRoutes($stateProvider) {
    // Users state routing
    $stateProvider
      .state('signup', {
        url: '/signup',
        templateUrl: 'app/modules/authentication/views/signup.view.html',
        controller: 'SignupCtrl as vm'
      })
      .state('signin', {
        url: '/signin',
        templateUrl: 'app/modules/authentication/views/login.view.html',
        controller: 'LoginCtrl as vm'
      });
  }

}).call(this);
;(function(){
'use strict';
  angular
    .module('authentication')
    .controller('LoginCtrl', LoginCtrl);

    /* @inject */
    function LoginCtrl($scope, Auth, $location, $window) {
      var vm = this;
      vm.user = {};
      vm.errors = {};
      vm.login = login;
      vm.loginOauth = loginOauth;

      ///////////////////////

      function login(form) {
        vm.submitted = true;

        if(form.$valid) {
          Auth.login({
            email: vm.user.email,
            password: vm.user.password
          })
          .then( function() {
            // Logged in, redirect to home
            $location.path('/');
          })
          .catch( function(err) {
            vm.errors.other = err.message;
          });
        }
      }

      function loginOauth(provider) {
        $window.location.href = '/auth/' + provider;
      }
    }

}).call(this);

;(function(){
'use strict';

  angular
    .module('authentication')
    .controller('SignupCtrl', SignupCtrl);

    /* @inject */
    function SignupCtrl($scope, Auth, $location, $window) {
      var vm = this;
      vm.errors = {};
      vm.user = {};
      vm.register = register;
      vm.loginOauth = loginOauth;

      //////////////

      function register(form) {
        vm.submitted = true;

        if(form.$valid) {
          Auth.createUser({
            name: vm.user.name,
            email: vm.user.email,
            password: vm.user.password
          })
          .then( function() {
            // Account created, redirect to home
            $location.path('/');
          })
          .catch( function(err) {
            err = err.data;
            vm.errors = {};

            // Update validity of form fields that match the mongoose errors
            angular.forEach(err.errors, function(error, field) {
              form[field].$setValidity('mongoose', false);
              vm.errors[field] = error.message;
            });
          });
        }
      }

      function loginOauth(provider) {
        $window.location.href = '/auth/' + provider;
      }
    }

}).call(this);
;(function(){
'use strict';

  angular
    .module('authentication')
    .factory('Auth', Auth);

    /* @inject */
    function Auth(User, $storage, serverUrl, $location, $rootScope, $http, $q, logger) {
      var self = this;

      var currentUser = {};

      var userApi = createUrl( serverUrl, 'users' );
      var authApi = createUrl( serverUrl, 'auth', 'local');

      if($storage.get('user_token')){
        reloadUserAsync()
          .then( function ( data ){
            currentUser = data || {};
          });
      }
      return {
        login: login,
        logout: logout,
        createUser: createUser,
        changePassword: changePassword,
        getCurrentUser: getCurrentUser,
        isLoggedIn: isLoggedIn,
        isLoggedInAsync: isLoggedInAsync,
        isAdmin: isAdmin,
        getToken: getToken,
        user: currentUser
      };

      /**
       * Authenticate user and save token
       *
       * @param  {Object}   user     - login info
       * @param  {Function} callback - optional
       * @return {Promise}
       */
      function login(user, cb) {
        var callback = cb || angular.noop;
        var deferred = $q.defer();

        var LoginData = {
          email: user.email,
          password: user.password
        };
        $http
          .post(authApi, LoginData)
          .then(function ( response ) {
            logger.log('Successfully Signed in');
            $storage.setUser( response.data );
            currentUser = response.data.user;
            deferred.resolve(response.data);
          })
          .catch(function ( err ) {
            logger.logError('There was an error signing in');
            logout();
            deferred.reject( err );
          }.bind(self));

        return deferred.promise;
      }

      /**
       * Delete access token and user info
       *
       * @param  {Function}
       */
      function logout() {
        $storage.clear();
        currentUser = {};
      }

      /**
       * Create a new user
       *
       * @param  {Object}   user     - user info
       * @param  {Function} callback - optional
       * @return {Promise}
       */
      function createUser(user, cb) {
        var callback = cb || angular.noop;
        var q = $q.defer();
        $http.post( userApi, user)
          .then(function ( response ) {
            logger.logSuccess('User Created');
            $storage.setUser(response.data);
            currentUser = response.data.user;
            q.resolve(response.data.user);
          })
          .catch(function (err) {
            logger.logSuccess('Error creating User \n' + err);
            logout();
            q.reject(err);
          });
        return q.promise;
      }

      /**
       * Change password
       *
       * @param  {String}   oldPassword
       * @param  {String}   newPassword
       * @param  {Function} callback    - optional
       * @return {Promise}
       */
      function changePassword(oldPassword, newPassword, cb) {
        var callback, data;
        callback = cb || angular.noop;
        if(!currentUser){

          currentUser = reloadUser() || {};

        }
        data = {
          oldPassword: oldPassword,
          newPassword: newPassword
        };

        return User.changePassword(currentUser._id, data);
      }

      /**
       * Gets all available info on authenticated user
       *
       * @return {Object} user
       */
      function getCurrentUser() {
        currentUser = $storage.getObject('user');
        return currentUser;
      }

      /**
       * Check if a user is logged in
       *
       * @return {Boolean}
       */
      function isLoggedIn() {
        reloadUser();
        return currentUser.hasOwnProperty('role');
      }

      /**
       * Waits for currentUser to resolve before checking if user is logged in
       */
      function isLoggedInAsync( callback ) {
        if(currentUser) {
          callback(true);
        } else {
          User.getMe()
            .then(function ( response ){
              if(response.data){
                currentUser = response.data;
                $storage.setObject(currentUser);
                callback(true);
              }
            })
            .catch( function (error) {
              callback(false);
            });
        }
      }

      /**
       * Check if a user is an admin
       *
       * @return {Boolean}
       */
      function isAdmin() {
        if(!currentUser){
          return false;
        }
          return currentUser.role === 'admin';
      }

      /**
       * Get auth token
       */
      function getToken() {
        return $storage.get('user_token');
      }

      /**
       * Reload current user
       */
      function reloadUser() {
        currentUser = $storage.getObject('user') || {};
        return currentUser;
      }
      function reloadUserAsync() {
        var q = $q.defer();
        if(currentUser._id){
          q.resolve(currentUser);
        }
        $http
          .get( createUrl( userApi, 'me' ) )
          .then( function ( response ){
            currentUser = response.data;
            $storage.setObject('user', currentUser);
            q.resolve(currentUser);
          })
          .catch( function ( error ){
            q.reject(error);
            currentUser = {};
            $storage.clear();
          });

        return q.promise;
      }
      function createUrl(){
        var args = Array.prototype.slice.call(arguments);
        return args.join('/');
      }


    }
}).call(this);
;(function(){
'use strict';
angular
  .module('authentication')
  .factory('authInterceptor', authInterceptor);

  /* @inject */
  function authInterceptor($rootScope, $q, $storage, $location){
    return {
      request:request,
      responseError: responseError
    };
    // Add authorization token to headers
    function request(config) {
      config.headers = config.headers || {};
      if ($storage.get('user_token')) {
        config.headers.Authorization = 'Bearer ' + $storage.get('user_token');
      }
      return config;
    }

    // Intercept 401s and redirect you to login
    function responseError(response) {
      if(response.status === 401) {
        // remove any stale tokens
        $storage.clear('user_token');
        return $q.reject(response);
      }
      else {
        return $q.reject(response);
      }
    }
  }
}).call(this);
;(function(){
'use strict';


  angular
    .module('generators')
    .factory('Generator', Generator);
    /* @inject */
    function Generator($http, serverUrl, $q, logger) {
      // Define Private Variables

      var api = createUrl( serverUrl, 'generators' )

      // Define the public api
      var instance = {
        all: all,
        one: one,
        create: create,
        update: update,
        destroy: destroy
      };
      return instance;

      ////////////////

      function all (){
        return $http.get( api );
      }
      function one ( id ){
        return $http.get( createUrl( api, id ) );
      }
      function create ( data ){
        return $http.post( api, data )
          .then( function (response){
            logger.logSuccess('Generator Saved');
            return response.data;
          })
          .catch( function (err){
            logger.logError('Error Saving data');
            return err;
          });
      }
      function update ( id, data ){
        return $http.put( createUrl( api, id ), data )
          .then( function ( response ){
            logger.logSuccess('Saved Successfully');
            return response.data;
          })
          .catch( function (err){
            logger.logError('Error Saving');
            return err;
          });
      }
      function destroy ( id ){
        return $http.delete( createUrl( api, id ) )
          .then( function (response){
            logger.logSuccess('Successfully Deleted');
            return response.data;
          })
          .catch( function (err){
            logger.logError('Error Deleting');
            return err;
          });
      }
      function createUrl(){
        var args = Array.prototype.slice.call(arguments);
        return args.join('/');
      }
    }

}).call(this);

;(function(){
'use strict';


  // Configuring the Articles module
  angular
    .module('generators')
    .run( Run );

  /* @inject */
  function Run(Menus) {
    // Set top bar menu items
    Menus.addMenuItem('topbar', 'Generators', 'generators', 'grey-300');
  }

}).call(this);
;(function(){
'use strict';

  //Setting up route
  angular
    .module('generators')
    .config( Configuration );

  /* @inject */
  function Configuration($stateProvider) {
    // Generators state routing
    $stateProvider
      .state('generators', {
        url: '/generators',
        templateUrl: 'app/modules/generators/views/generators.view.html',
        controller: 'GeneratorsController as vm',
        resolve: {
          resolvedList: resolvedList
        }
      })

      .state('generators.detail', {
        url: '/:generatorId',
        templateUrl: 'app/modules/generators/views/generators.detail.view.html',
        controller: 'GeneratorsDetailController as vm',
        resolve: {
          resolvedDetail: resolvedDetail
        }
      })


    ////////////////
    function resolvedDetail($stateParams, Generator){
      return Generator.one($stateParams.generatorId)
        .then( function ( response ){
          return response.data;
        })
    }
    function resolvedList(Generator){
      return Generator.all()
        .then( function ( response ){
          return response.data;
        })
    }
  }
}).call(this);
;(function(){
'use strict';

  // Generators controller
  angular
    .module('generators')
    .controller('GeneratorsDetailController', GeneratorsDetailController);

  /* @inject */
  function GeneratorsDetailController(resolvedDetail) {
    var vm = this;

    vm.generator = resolvedDetail;

    //////////////////////

  }
}).call(this);
;(function(){
'use strict';

  // Generators controller
  angular
    .module('generators')
    .controller('GeneratorsController', GeneratorsController);

  /* @inject */
  function GeneratorsController(resolvedList, $scope, $state, Generator) {

    var vm;

    vm                = this;
    vm.shown          = {};
    vm.showDetail     = false;
    vm.showGenerator  = showGenerator;
    vm.generators     = resolvedList;

    //////////////////////

    function showGenerator(generator){

        if(generator._id === vm.shown._id){
          $state.go('generators');
          vm.showDetail = false;
          vm.shown = {};
        } else {
          $state.go('generators.detail', {generatorId: generator._id});
          vm.shown = generator;
          vm.showDetail = true;
        }
    }

    $scope.$on('childClosed', function () {
      vm.showDetail = false;
    });

  }
}).call(this);

;(function(){
'use strict';

  angular
    .module('core')
    .factory('Thing', Thing);
    /* @inject */
    function Thing($http, serverUrl, $q, logger) {
      // Define Private Variables

      var api = createUrl( serverUrl, 'things' )

      // Define the public api
      var instance = {
        all: all,
        one: one,
        create: create,
        update: update,
        destroy: destroy
      };
      return instance;

      ////////////////

      function all (){
        return $http.get( api );
      }
      function one ( id ){
        return $http.get( createUrl( api, id ) );
      }
      function create ( data ){
        var q = $q.defer();
        $http
          .post( api, data )
          .then( function (data){
            logger.logSuccess('Thing Saved');
            q.resolve( data );
          })
          .catch( function (err){
            logger.logError('Error Saving data');
            q.reject(err);
          });
        return q.promise;
      }
      function update ( id, data ){
        var q = $q.defer();
        $http
          .put( createUrl( api, id ), data )
          .then( function (data){
            logger.logSuccess('Saved Successfully');
            q.resolve( data );
          })
          .catch( function (err){
            logger.logError('Error Saving');
            q.reject(err);
          });
        return q.promise;
      }
      function destroy ( id ){
        var q = $q.defer();
        $http
          .delete( createUrl( api, id ) )
          .then( function (data){
            logger.logSuccess('Successfully Deleted');
            q.resolve( data );
          })
          .catch( function (err){
            logger.logError('Error Deleting');
            q.reject(err);
          });
        return q.promise;
      }
      function createUrl(){
        var args = Array.prototype.slice.call(arguments);
        return args.join('/');
      }
    }

}).call(this);

;(function(){
'use strict';

  angular
    .module('core')
    .factory('User', User);
    /* @inject */
    function User($http, serverUrl, $q, logger) {
      // Define Private Variables

      var api = createUrl(serverUrl, 'users');

      // Define the public api
      var instance = {
        all: all,
        one: one,
        create: create,
        update: update,
        destroy: destroy,
        changePassword: changePassword,
        getMe: getMe
      };
      return instance;

      ////////////////

      function all (){
        return $http.get( api );
      }
      function one ( id ){
        return $http.get( createUrl( api, id ) );
      }
      function create ( data ){
        var q = $q.defer();
        $http
          .post( api, data )
          .then( function (data){
            logger.logSuccess('User Saved');
            q.resolve( data );
          })
          .catch( function (err){
            logger.logError('Error Saving data');
            q.reject(err);
          });
        return q.promise;
      }
      function update ( id, data ){
        var q = $q.defer();
        $http
          .put( createUrl( api, id ), data )
          .then( function (data){
            logger.logSuccess('Saved Successfully');
            q.resolve( data );
          })
          .catch( function (err){
            logger.logError('Error Saving');
            q.reject(err);
          });
        return q.promise;
      }
      function destroy ( id ){
        var q = $q.defer();
        $http
          .delete( createUrl( api, id ) )
          .then( function (data){
            logger.logSuccess('Successfully Deleted');
            q.resolve( data );
          })
          .catch( function (err){
            logger.logError('Error Deleting');
            q.reject(err);
          });
        return q.promise;
      }
      function changePassword( id, data ){
        var q = $q.defer();
        $http
          .put( createUrl( api, id, 'password' ), data )
          .then( function (data){
            logger.logSuccess('Password Successfully Changed');
            q.resolve( data );
          })
          .catch( function (err){
            logger.logError('Error changing password');
            q.reject(err);
          });
        return q.promise;
      }
      function getMe(){
        return $http.get([api, 'me'].join('/'));
      }
      function createUrl(){
        var args = Array.prototype.slice.call(arguments);
        return args.join('/');
      }
    }

}).call(this);

;(function(){
  'use strict';
  /**
   * Removes server error when user updates input
   */
  angular
    .module('core')
    .directive('mongooseError', mongooseError);

  /* @inject */
  function mongooseError() {
      return {
        restrict: 'A',
        require: 'ngModel',
        link: function(scope, element, attrs, ngModel) {
          element.on('keydown', function() {
            return ngModel.$setValidity('mongoose', true);
          });
        }
      };
  }
}).call(this);
;(function(){
  'use strict';

  angular
    .module('core')
    .directive('point', point);

  /* @inject */
  function point() {
    return {
      template: '<div class="pointer" data-ng-transclude></div>',
      restrict: 'A',
      scope: true,
      transclude:true,
      link: postLink
    };

    //////////

    function postLink(scope, element, attrs) {
      // Point directive logic
      // ...

      // element.text('this is the point directive');
    }
  }
}).call(this);

;(function(){
  'use strict';

  angular
    .module('core')
    .directive('yIcon', yIcon);

  /* @inject */
  function yIcon() {
    return {
      template: '<i class="fa fa-{{icon}}"></i>',
      restrict: 'A',
      scope:true,
      link: postLink
    };

    //////////

    function postLink(scope, element, attrs) {
      scope.icon = attrs.yIcon;
      // Icon directive logic
      // ...

      // element.text('this is the icon directive');
    }
  }
}).call(this);

;(function() {
'use strict';
  angular
    .module('core')
    .factory('logger', logger);
    function logger() {
      var logIt;
      toastr.options = {
        'closeButton': true,
        'positionClass': 'toast-bottom-right',
        'timeOut': '3000'
      };
      logIt = function(message, type) {
        return toastr[type](message);
      };
      return {
        log: function(message) {
          logIt(message, 'info');
        },
        logWarning: function(message) {
          logIt(message, 'warning');
        },
        logSuccess: function(message) {
          logIt(message, 'success');
        },
        logError: function(message) {
          logIt(message, 'error');
        }
      };
    }
}).call(this);


(function(){

'use strict';

//Menu service used for managing  menus
  angular
    .module('core')
    .service('Menus', Menus);

  /* @inject */
  function Menus() {
    // Define a set of default roles
    this.defaultRoles = ['user'];

    // Define the menus object
    this.menus = {};

    // A private function for rendering decision
    var shouldRender = function(user) {
      if(user) {
        for (var userRoleIndex in user.roles) {
          for (var roleIndex in this.roles) {
            if(this.roles[roleIndex] === user.roles[userRoleIndex]) {
              return true;
            }
          }
        }
      } else {
        return this.isPublic;
      }

      return false;
    };

    // Validate menu existance
    this.validateMenuExistance = function(menuId) {
      if (menuId && menuId.length) {
        if (this.menus[menuId]) {
          return true;
        } else {
          throw new Error('Menu does not exists');
        }
      } else {
        throw new Error('MenuId was not provided');
      }

      return false;
    };

    // Get the menu object by menu id
    this.getMenu = function(menuId) {
      // Validate that the menu exists
      this.validateMenuExistance(menuId);

      // Return the menu object
      return this.menus[menuId];
    };

    // Add new menu object by menu id
    this.addMenu = function(menuId, isPublic, roles) {
      // Create the new menu
      this.menus[menuId] = {
        isPublic: isPublic || false,
        roles: roles || this.defaultRoles,
        items: [],
        shouldRender: shouldRender
      };

      // Return the menu object
      return this.menus[menuId];
    };

    // Remove existing menu object by menu id
    this.removeMenu = function(menuId) {
      // Validate that the menu exists
      this.validateMenuExistance(menuId);

      // Return the menu object
      delete this.menus[menuId];
    };

    // Add menu item object
    this.addMenuItem = function(menuId, menuItemTitle, menuItemURL, menuItemUIRoute, isPublic, roles) {
      // Validate that the menu exists
      this.validateMenuExistance(menuId);

      // Push new menu item
      this.menus[menuId].items.push({
        title: menuItemTitle,
        link: menuItemURL,
        uiRoute: menuItemUIRoute || ('/' + menuItemURL),
        isPublic: isPublic || this.menus[menuId].isPublic,
        roles: roles || this.defaultRoles,
        shouldRender: shouldRender
      });

      // Return the menu object
      return this.menus[menuId];
    };

    // Remove existing menu object by menu id
    this.removeMenuItem = function(menuId, menuItemURL) {
      // Validate that the menu exists
      this.validateMenuExistance(menuId);

      // Search for menu item to remove
      for (var itemIndex in this.menus[menuId].items) {
        if (this.menus[menuId].items[itemIndex].link === menuItemURL) {
          this.menus[menuId].items.splice(itemIndex, 1);
        }
      }

      // Return the menu object
      return this.menus[menuId];
    };

    //Adding the topbar menu
    this.addMenu('topbar');
  }
}).call(this);
;(function(){
  'use strict';

  angular
    .module('core')
    .factory('Modal', Modal);

  /* @inject */
  function Modal($rootScope, $modal) {
    /**
     * Opens a modal
     * @param  {Object} scope      - an object to be merged with modal's scope
     * @param  {String} modalClass - (optional) class(es) to be applied to the modal
     * @return {Object}            - the instance $modal.open() returns
     */
    function openModal(scope, modalClass) {
      var modalScope = $rootScope.$new();
      scope = scope || {};
      modalClass = modalClass || 'modal-default';

      angular.extend(modalScope, scope);

      return $modal.open({
        templateUrl: 'components/modal/modal.html',
        windowClass: modalClass,
        scope: modalScope
      });
    }

    // Public API here
    return {

      /* Confirmation modals */
      confirm: {

        /**
         * Create a function to open a delete confirmation modal (ex. ng-click='myModalFn(name, arg1, arg2...)')
         * @param  {Function} del - callback, ran when delete is confirmed
         * @return {Function}     - the function to open the modal (ex. myModalFn)
         */
        delete: function(del) {
          del = del || angular.noop;

          /**
           * Open a delete confirmation modal
           * @param  {String} name   - name or info to show on modal
           * @param  {All}           - any additional args are passed staight to del callback
           */
          return function() {
            var args = Array.prototype.slice.call(arguments),
                name = args.shift(),
                deleteModal;

            deleteModal = openModal({
              modal: {
                dismissable: true,
                title: 'Confirm Delete',
                html: '<p>Are you sure you want to delete <strong>' + name + '</strong> ?</p>',
                buttons: [{
                  classes: 'btn-danger',
                  text: 'Delete',
                  click: function(e) {
                    deleteModal.close(e);
                  }
                }, {
                  classes: 'btn-default',
                  text: 'Cancel',
                  click: function(e) {
                    deleteModal.dismiss(e);
                  }
                }]
              }
            }, 'modal-danger');

            deleteModal.result.then(function(event) {
              del.apply(event, args);
            });
          };
        }
      }
    };
  }
}).call(this);

'use strict';

angular.module('socketMock', [])
  .factory('socket', function() {
    return {
      socket: {
        connect: function() {},
        on: function() {},
        emit: function() {},
        receive: function() {}
      },

      syncUpdates: function() {},
      unsyncUpdates: function() {}
    };
  });
;(function(){
/* global io */
'use strict';

  angular
    .module('core')
    .factory('socket', socketService);
    socketService.$inject = ['socketFactory','serverBaseUrl'];
    function socketService(socketFactory,serverBaseUrl) {

      // socket.io now auto-configures its connection when we ommit a connection url
      var ioSocket = io(serverBaseUrl, {
        // Send auth token on connection, you will need to DI the Auth service above
        // 'query': 'token=' + Auth.getToken()
        path: '/socket.io-client'
      });

      var socket = socketFactory({
        ioSocket: ioSocket
      });

      return {
        socket: socket,

        /**
         * Register listeners to sync an array with updates on a model
         *
         * Takes the array we want to sync, the model name that socket updates are sent from,
         * and an optional callback function after new items are updated.
         *
         * @param {String} modelName
         * @param {Array} array
         * @param {Function} cb
         */
        syncUpdates: function (modelName, collection, callback) {
          callback = callback || angular.noop;
          console.log(collection, modelName);
          /**
           * Syncs item creation/updates on 'model:save'
           */
          socket.on(modelName + ':save', function (item) {
            var index = _.findIndex(collection, {_id: item._id});
            var oldItem = collection[index] || null;
            var event = 'created';


            // replace oldItem if it exists
            // otherwise just add item to the collection
            if (oldItem) {
              collection.splice(index, 1, item);
              event = 'updated';
            } else {
              var scope = collection.push(item);
              // var readyScope = collection.call('push', item);
              return callback(event, item, scope);
            }

            callback(event, item, collection);
          });

          /**
           * Syncs removed items on 'model:remove'
           */
          socket.on(modelName + ':remove', function (item) {
            console.log('removed=============',  item);
            var event = 'deleted';
            _.remove(collection, {_id: item._id});
            callback(event, item, collection);
          });
        },

        /**
         * Removes listeners for a models updates on the socket
         *
         * @param modelName
         */
        unsyncUpdates: function (modelName) {
          socket.removeAllListeners(modelName + ':save');
          socket.removeAllListeners(modelName + ':remove');
        }
      };
    }
}).call(this);
;(function(){
'use strict';
  angular
    .module('core')
    .service('$storage', Storage);

  function Storage(){
    this.setObject = function( key, value ){
      if(key === undefined || key === 'undefined') {return;}
      return localStorage.setItem( key, JSON.stringify( value ) );
    };
    this.set = function( key, value ){
      if(key === undefined || key === 'undefined') {return;}
      return localStorage.setItem( key, value);
    };
    this.getObject = function(key){
      var value = localStorage.getItem(key);
      return JSON.parse(value);
    };
    this.get = function(key){
      var value = localStorage.getItem(key);
      return value;
    };
    this.setUser = function(data){
      var token = data.token;
      var user = data.user;
      this.set('user_token', token);
      return this.setObject('user', user);
    };
    this.clear = function(key){
      if(key){
        delete localStorage[key];
        return ;
      }
      localStorage.clear();
      return;
    };
  }
}).call(this);
;(function(){
  'use strict';

  angular
    .module('administration')
    .directive('adminNav', adminNav);

  /* @inject */
  function adminNav(User, Auth) {
    return {
      templateUrl: 'app/modules/administration/directives/admin-nav/admin-nav.view.html',
      restrict: 'E',
      link: postLink
    };

    //////////

    function postLink(scope, element, attrs) {
      // Admin nav directive logic
      // ...

      scope.isAdmin = Auth.isAdmin;
      User.all()
        .then( function (response){
          scope.users = response.data;
        });
    }
  }
}).call(this);
